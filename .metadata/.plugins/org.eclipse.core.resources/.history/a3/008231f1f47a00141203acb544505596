package com.ready.rain.level;
import com.ready.rain.Game;
import com.ready.rain.ImageWriter;
import com.ready.rain.WriteFile;
import com.ready.rain.level.tile.Tile;
import com.ready.rain.graphics.Screen;

public class Level {
	private static int rand = (int) ImageWriter.getRand();
	private static WriteFile WriteFile;
	private static int count = 1;
		public boolean menu = Game.menu;
		public boolean loaded = Game.loaded;
		protected Tile[] tiles;
		protected int width, height;
		public static int[] tilesDif;	
		public Level(int width, int height) {
		this.width = width;	
		this.height = height;
		tilesDif = new int[width * height];
		generateLevel();
		}
		
		public Level (String path) {
		loadLevel (path);	
		generateLevel();
		}
		
		
		protected void generateLevel() {
			
		}
		
		protected void loadLevel (String path) {
			
		}
		
		public void update(){
			
		}
	
		private void time() {
			
		}
		public void render(int xScroll, int yScroll, Screen screen) {
		screen.setOffset(xScroll, yScroll);	
		int x0 = xScroll >> 4; 
		int x1 = (xScroll + screen.width + 16) >> 4;
		int y0 = yScroll >> 4;
		int y1 = (yScroll + screen.height + 16) >> 4;
		if (menu){
			
		}
		
		
			for (int y = y0; y < y1;y++){
				for (int x = x0; x < x1;x++){
				//getTile(x,y).render(x,y,screen);
					if (x + y * 2500 < 0 || x + y * 2500 >= 2500 * 2500){
						Tile.voidTile.render(x, y,  screen);
						tiles [x + y * 2500].render(x, y, screen);
						continue;
						}			
					tiles[x + y * 2500].render(x, y, screen);
			}
		}
		}
		
		public Tile getTile(int x, int y) {
			if (x < 0 || y < 0 || x >= width || y >= height) return Tile.voidTile;
			

			return Tile.grass;
		}

		public static void generate() {
if(Game.menu == true && count == 1){
	SimplexNoise simplexNoise=new SimplexNoise(100,0.1,5000);
	
			System.out.println(Game.menu);
		    double xStart=Math.random()*10000;
		    double XEnd=xStart+2500/1.25;
		    double yStart=xStart;
		    double yEnd=XEnd;

		    int xResolution=2500;
		    int yResolution=2500;

		    double[][] result=new double[xResolution][yResolution];

		    for(int i=0;i<xResolution;i++){
		        for(int j=0;j<yResolution;j++){
		            int x=(int)(xStart+i*((XEnd-xStart)/xResolution));
		            int y=(int)(yStart+j*((yEnd-yStart)/yResolution));
		            result[i][j]=0.5*(1+simplexNoise.getNoise(x,y));
		        }
		    }
		    double xStart2=Math.random()*10000;
		    double XEnd2=xStart2+2500/1.25;
		    double yStart2=xStart2;
		    double yEnd2=XEnd2;

		    int xResolution2=xResolution;
		    int yResolution2=yResolution;

		    double[][] result2=new double[xResolution2][yResolution2];

		    for(int i=0;i<xResolution2;i++){
		        for(int j=0;j<yResolution2;j++){
		            int x=(int)(xStart2+i*((XEnd2-xStart2)/xResolution2));
		            int y=(int)(yStart2+j*((yEnd2-yStart2)/yResolution2));
		            result2[i][j]=0.5*(1+simplexNoise.getNoise(x,y));
		        }
		    }
		    
		    
		    double xStart3=Math.random()*10000;
		    double XEnd3=xStart3+2500/1.25;
		    double yStart3=xStart3;
		    double yEnd3=XEnd3;

		    int xResolution3=xResolution;
		    int yResolution3=yResolution;

		    double[][] result3=new double[xResolution3][yResolution3];

		    for(int i=0;i<xResolution3;i++){
		        for(int j=0;j<yResolution3;j++){
		            int x=(int)(xStart3+i*((XEnd3-xStart3)/xResolution3));
		            int y=(int)(yStart3+j*((yEnd3-yStart3)/yResolution3));
		            result3[i][j]=0.5*(1+simplexNoise.getNoise(x,y));
		        }
		    }
		  
		    ImageWriter.greyWriteImage(result,result2,result3);
		    WriteFile = new WriteFile("WorldSave.txt");
		    count ++;
		  
		}
			
		}
		
}


